%%% TESTER DE AUTO-ROCKETPY EN MATLAB %%%

%%% PRUEBA DE SIMULACIÓN DESDE MATLAB %%%
tic;
% Inicialización
clear;clc; close;
pyenv('ExecutionMode','OutOfProcess');
rocketpy = py.importlib.import_module('rocketpy');
sim = py.importlib.import_module('simulador');
datcom = py.importlib.import_module('datcom');
rdata = py.importlib.import_module('rocket_data');

% Se cargan los datos de la simulación
data = rdata.load_rocket_data(0);
DATCOM = datcom.DATCOM;
Environment = rocketpy.environment.Environment;
SolidMotor = rocketpy.motors.solid_motor.SolidMotor;
NoseCone = rocketpy.rocket.aero_surface.nose_cone.NoseCone;
TrapezoidalFins = rocketpy.rocket.aero_surface.fins.trapezoidal_fins.TrapezoidalFins;
Rocket = rocketpy.rocket.Rocket;
Flight = rocketpy.simulation.flight.Flight;

% Definición de DATCOM
dtcm = DATCOM(pyargs('datcom_path','D:\\DATCOM'));

% Definición de la atmósfera
env = Environment(pyargs(...
    'latitude',data{'latitud_base'}, ...
    'longitude',data{'longitud_base'}, ...
    'elevation',data{'elevacion_base'} ...
));

m = (data{'viento_mag_10'} - data{'viento_mag_0'})/10000;
n = ones(2,1) * double(data{'viento_mag_0'});
h = transpose(linspace(0,10000,2));
magnitud_viento = m*h + n;
viento_este = magnitud_viento * sind(double(data{'viento_heading'}));
viento_norte = magnitud_viento * cosd(double(data{'viento_heading'}));
perfil_este = [h viento_este];
perfil_norte = [h viento_norte];
perfil_este_py = py.list({num2cell(perfil_este(1, :)), num2cell(perfil_este(2, :))});
perfil_norte_py = py.list({num2cell(perfil_norte(1, :)), num2cell(perfil_norte(2, :))});

env.set_atmospheric_model(pyargs( ...
    'type', "custom_atmosphere", ...
    'wind_u', perfil_este_py, ...
    'wind_v', perfil_norte_py ...
));

Tomorrow = datetime('tomorrow');
env.set_date({int32(Tomorrow.Year), int32(Tomorrow.Month), int32(Tomorrow.Day), int32(12)})

% Definición del motor
motor = SolidMotor(pyargs( ...
    'thrust_source', data{'thrust_source'}, ...
    'dry_mass', data{'motor_dry_mass'}, ...
    'dry_inertia', py.tuple({data{'motor_I11'},data{'motor_I11'},data{'motor_I33'}}), ...
    'nozzle_radius', data{'motor_nozzle_radius'}, ...
    'grain_number', data{'grain_number'}, ...
    'grain_density', data{'grain_density'}, ...
    'grain_outer_radius', data{'grain_outer_radius'}, ...
    'grain_initial_inner_radius', data{'grain_initial_inner_radius'}, ...
    'grain_initial_height', data{'grain_height'}, ...
    'grain_separation', data{'grain_separation'}, ...
    'grains_center_of_mass_position', data{'cdg_grain'}, ...
    'center_of_dry_mass_position', data{'motor_dry_cdg'}, ...
    'nozzle_position', 0, ...
    'burn_time', data{'burnout_time'}, ...
    'throat_radius', data{'throat_radius'}, ...
    'interpolation_method', "linear", ...
    'coordinate_system_orientation', "nozzle_to_combustion_chamber" ...
));

% Definición de las superficies aerodinámicas
nose_cone = NoseCone(pyargs( ...
    'length', data{'longitud_nose_cone'}, ...
    'kind', data{'tipo_nose_cone_rocketpy'}, ...
    'base_radius', data{'radius'}, ...
    'bluffness', py.None, ...
    'rocket_radius', data{'radius'}, ...
    'name', "Nose Cone" ...
));

aletas = TrapezoidalFins(pyargs( ...
    'n', data{'fins_number'}, ...
    'root_chord', data{'fins_root_chord'}, ...
    'tip_chord', data{'fins_tip_chord'}, ...
    'span', data{'fins_span'}, ...
    'rocket_radius', data{'radius'}, ...
    'sweep_length', data{'fins_sweep_lenght'}, ...
    'name', "Aletas" ...
));

% Se define el cohete
rocket = Rocket(pyargs( ...
    'radius', data{'radius'}, ...
    'mass', data{'no_motor_mass'}, ...
    'inertia', py.tuple({data{'inercia_I11'}, data{'inercia_I11'}, data{'inercia_I33'}}), ...
    'power_off_drag', 0, ...
    'power_on_drag', 0, ...
    'center_of_mass_without_motor', data{'cdg_no_motor'}, ...
    'coordinate_system_orientation', "nose_to_tail" ...
));
Rocket.add_motor(pyargs( ...
    'self', rocket, ...
    'motor', motor, ...
    'position', data{'longitud'} ...
));
Rocket.add_surfaces(pyargs( ...
    'self', rocket, ...
    'surfaces', nose_cone, ...
    'positions', 0 ...
));
Rocket.add_surfaces(pyargs( ...
    'self', rocket, ...
    'surfaces', aletas, ...
    'positions', data{'fins_posicion'} ...
));

% Inicialización de la simulación
output = sim.flight_initialization(pyargs( ...
    'data', data, ...
    'rocket', rocket, ...
    'environment', env ...
));
resultados = output{1};
flight = output{2};

% Bucle de la simulación de vuelo
while flight.apogee_time == 0

    output = sim.flight_simulation(pyargs( ...
        'data', data, ...
        'results', resultados, ...
        'rocket', rocket, ...
        'environment', env, ...
        'flight', flight, ...
        'datcom', dtcm ...
    ));
    resultados = output{1};
    flight = output{2};

end
toc
properties = {'t','x','y','z','vx','vy','vz','w1','w2','w3','R3',...
    'wind_velocity_x','wind_velocity_y'};
resultados.export('matlab_test.csv',properties{:});
